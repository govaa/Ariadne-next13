"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.vuePreprocessor = void 0;
const get_experimental_parser_plugins_1 = require("../utils/get-experimental-parser-plugins");
const preprocessor_1 = require("./preprocessor");
function vuePreprocessor(code, options) {
    let preprocessedCode = code;
    try {
        const { parse } = require('@vue/compiler-sfc');
        const { descriptor } = parse(code);
        if (descriptor.script) {
            preprocessedCode = sortScript(descriptor.script, preprocessedCode, options);
        }
        if (descriptor.scriptSetup) {
            preprocessedCode = sortScript(descriptor.scriptSetup, preprocessedCode, options);
        }
        return preprocessedCode;
    }
    catch (err) {
        if (err.code === 'MODULE_NOT_FOUND') {
            console.warn('[@ianvs/prettier-plugin-sort-imports]: Could not process .vue file.  Please be sure that "@vue/compiler-sfc" is installed in your project.');
            throw err;
        }
    }
}
exports.vuePreprocessor = vuePreprocessor;
function isTS(lang) {
    return lang === 'ts' || lang === 'tsx';
}
/**
 * Configures correct babel plugins, sorts imports in a script or setupScript,
 * and replaces that script/setupScript within the original code
 *
 * Much of this was adapted from https://github.com/vuejs/vue/blob/49b6bd4264c25ea41408f066a1835f38bf6fe9f1/packages/compiler-sfc/src/compileScript.ts#L118-L134
 *
 * @param param0 a script or setupScript
 * @param code Source code of the file
 * @param options Prettier options
 * @returns Original code with sorted imports in the script provided
 */
function sortScript({ content, lang }, code, options) {
    const { importOrderParserPlugins = [] } = options;
    let pluginClone = [...importOrderParserPlugins];
    const newPlugins = [];
    if (!isTS(lang) || lang === 'tsx') {
        newPlugins.push('jsx');
    }
    else {
        // Remove jsx if typescript and not tsx
        pluginClone = pluginClone.filter((p) => p !== 'jsx');
    }
    newPlugins.push(...pluginClone);
    if (isTS(lang)) {
        if (!(0, get_experimental_parser_plugins_1.hasPlugin)(newPlugins, 'typescript')) {
            newPlugins.push('typescript');
        }
    }
    const adjustedOptions = {
        ...options,
        importOrderParserPlugins: newPlugins,
    };
    return code.replace(content, () => `\n${(0, preprocessor_1.preprocessor)(content, adjustedOptions)}\n`);
}
